"use strict";

var net = require("net");
var fs = require("fs");
var zlib = require("zlib");
var helpers = require("./helpers.js");
var child_process = require("child_process");
var buffer = require("buffer");

var server = new net.createServer();
var gunzip = zlib.createGunzip();

module.exports = {
  receive: function receive(name) {
    var port = arguments[1] === undefined ? 1208 : arguments[1];

    var host = "0.0.0.0";

    return new Promise(function (resolve, reject) {
      server.listen(port, host, function () {

        server.on("connection", function (conn) {
          var connIp = conn.remoteAddress;
          var connPort = conn.remotePort;

          conn.on("close", function () {
            console.log("\n" + connIp + ":" + connPort, "disconnected.");
          });

          conn.on("data", function (data) {
            process.stdout.write("Data received: " + helpers.humanFileSize(conn.bytesRead) + "                \r");
          });

          var cmd = child_process.spawn("docker", ["import", "-", name]);
          conn.pipe(gunzip).pipe(cmd.stdin);
          resolve(name);
        });
      });

      server.on("error", function (err) {
        reject(err);
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDdEMsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDcEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOztpQkFFbEI7QUFDYixTQUFPLEVBQUEsaUJBQUMsSUFBSSxFQUFlO1FBQWIsSUFBSSxnQ0FBRyxJQUFJOztBQUN2QixRQUFJLElBQUksR0FBRyxTQUFTLENBQUM7O0FBRXJCLFdBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFXOztBQUVuQyxjQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFTLElBQUksRUFBRTtBQUNyQyxjQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ2hDLGNBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRS9CLGNBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVc7QUFDMUIsbUJBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sR0FBQyxHQUFHLEdBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1dBQzFELENBQUMsQ0FBQzs7QUFFSCxjQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFTLElBQUksRUFBRTtBQUM3QixtQkFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztXQUN4RyxDQUFDLENBQUM7O0FBR0gsY0FBSSxHQUFHLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDL0QsY0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDZixDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7O0FBRUgsWUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBUyxHQUFHLEVBQUU7QUFDL0IsY0FBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ2IsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0o7Q0FDRiIsImZpbGUiOiJzcmMvc2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciB6bGliID0gcmVxdWlyZSgnemxpYicpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuanMnKTtcbnZhciBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpO1xuXG52YXIgc2VydmVyID0gbmV3IG5ldC5jcmVhdGVTZXJ2ZXIoKTtcbnZhciBndW56aXAgPSB6bGliLmNyZWF0ZUd1bnppcCgpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlY2VpdmUobmFtZSwgcG9ydCA9IDEyMDgpIHtcbiAgICBsZXQgaG9zdCA9ICcwLjAuMC4wJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXJ2ZXIubGlzdGVuKHBvcnQsIGhvc3QsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHNlcnZlci5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uKGNvbm4pIHtcbiAgICAgICAgICB2YXIgY29ubklwID0gY29ubi5yZW1vdGVBZGRyZXNzO1xuICAgICAgICAgIHZhciBjb25uUG9ydCA9IGNvbm4ucmVtb3RlUG9ydDtcblxuICAgICAgICAgIGNvbm4ub24oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlxcblwiICsgY29ubklwKyc6Jytjb25uUG9ydCwgJ2Rpc2Nvbm5lY3RlZC4nKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbm4ub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSgnRGF0YSByZWNlaXZlZDogJyArIGhlbHBlcnMuaHVtYW5GaWxlU2l6ZShjb25uLmJ5dGVzUmVhZCkgKyBcIiAgICAgICAgICAgICAgICBcXHJcIik7XG4gICAgICAgICAgfSk7XG5cblxuICAgICAgICAgIGxldCBjbWQgPSBjaGlsZF9wcm9jZXNzLnNwYXduKCdkb2NrZXInLCBbJ2ltcG9ydCcsICctJywgbmFtZV0pO1xuICAgICAgICAgIGNvbm4ucGlwZShndW56aXApLnBpcGUoY21kLnN0ZGluKTtcbiAgICAgICAgICByZXNvbHZlKG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBzZXJ2ZXIub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iXX0=