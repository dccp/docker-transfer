"use strict";

var server = require("http").createServer(),
    io = require("socket.io")(server),
    ss = require("socket.io-stream"),
    fs = require("fs"),
    zlib = require("zlib"),
    helpers = require("./helpers.js"),
    child_process = require("child_process"),
    buffer = require("buffer"),
    gunzip = zlib.createGunzip();

var open = undefined;

var exports = {
  receive: function receive(name, port) {
    var host = "0.0.0.0";

    return new Promise(function (resolve, reject) {
      var callback = function callback() {
        log("SERVER: listening at " + host + ":" + port);
        io.sockets.on("connection", function (socket) {
          log("SERVER: received connection");
          ss(socket).on("docker", function (metadata, stream) {
            var count = 0;
            var cmd = child_process.spawn("docker", ["load"]);
            stream.pipe(gunzip).on("data", function (data) {
              count += data.length;
              process.stdout.write((count / metadata.VirtualSize * 100).toFixed(2) + "%    \r");
            }).on("end", function () {
              log("SERVER: End of stream. Data received: " + helpers.humanFileSize(count));
              child_process.spawn("docker", ["tag", metadata.Id, name]);
              resolve(metadata.Id);
            }).pipe(cmd.stdin);
          });
          socket.on("disconnect", function () {
            server.close();
            open = false;
            log("Docker-transfer server disconnected");
          });
        });
      };

      if (open) {
        socket.removeAllListeners("connection");
        server.close(function () {
          server.listen(port, host, callback);
        });
      } else {
        open = true;
        server.listen(port, host, callback());
      }

      //   server.on('connection', function(conn) {
      //     var connIp = conn.remoteAddress;
      //     var connPort = conn.remotePort;

      //     conn.on('close', function() {
      //       console.log("\n" + connIp+':'+connPort, 'disconnected.');
      //     });

      //     conn.on('data', function(data) {
      //       process.stdout.write('Data received: '
      //                           + helpers.humanFileSize(conn.bytesRead)
      //                           + "                \r");
      //     });

      //     conn.on('end', function() {
      //       console.log("\n" + connIp+':'+connPort, 'ended.');
      //       resolve(name);
      //     });

      //     console.log(name);
      //     // let cmd = child_process.spawn('docker', ['import', '-', name]);
      //     // conn.pipe(gunzip).pipe(cmd.stdin);
      //   });
      server.on("error", function (err) {
        reject(err);
      });
    });
  },
  run: function run(hash, port) {
    var ports = [port, ":", 80].join("");
    // docker run -d -p $EXTERNAL_PORT:$INTERNAL_PORT $IMAGE_HASH
    child_process.spawn("docker", ["run", "-d", "-p", ports, metadata.Id]);
  }
};

function log(str) {
  console.log(helpers.timestamp(), str);
}

module.exports = exports;
//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDdkMsQ0FBQyxDQUFDO09BQ0osTUFBTTtBQUNMLFlBQUksR0FBRyxJQUFJLENBQUM7QUFDWixjQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztPQUN2Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCRCxZQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFBLEdBQUcsRUFBSTtBQUN4QixjQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDYixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSjtBQUNELEtBQUcsRUFBQSxhQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDZCxRQUFJLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUVyQyxpQkFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDeEU7Q0FDRixDQUFDOztBQUVGLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUNkLFNBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3pDOztpQkFFYyxPQUFPIiwiZmlsZSI6InNyYy9zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2VydmVyID0gcmVxdWlyZSgnaHR0cCcpLmNyZWF0ZVNlcnZlcigpLFxuICAgIGlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoc2VydmVyKSxcbiAgICBzcyA9IHJlcXVpcmUoJ3NvY2tldC5pby1zdHJlYW0nKSxcbiAgICBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgemxpYiA9IHJlcXVpcmUoJ3psaWInKSxcbiAgICBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmpzJyksXG4gICAgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKSxcbiAgICBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKSxcbiAgICBndW56aXAgPSB6bGliLmNyZWF0ZUd1bnppcCgpO1xuXG5sZXQgb3BlbjtcblxubGV0IGV4cG9ydHMgPSB7XG4gIHJlY2VpdmUobmFtZSwgcG9ydCkge1xuICAgIGxldCBob3N0ID0gJzAuMC4wLjAnO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2coJ1NFUlZFUjogbGlzdGVuaW5nIGF0ICcgKyBob3N0ICsgXCI6XCIgKyBwb3J0KTtcbiAgICAgICAgaW8uc29ja2V0cy5vbignY29ubmVjdGlvbicsIHNvY2tldCA9PiB7XG4gICAgICAgICAgbG9nKCdTRVJWRVI6IHJlY2VpdmVkIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgICBzcyhzb2NrZXQpLm9uKCdkb2NrZXInLCBmdW5jdGlvbihtZXRhZGF0YSwgc3RyZWFtKSB7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgbGV0IGNtZCA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24oJ2RvY2tlcicsIFsnbG9hZCddKTtcbiAgICAgICAgICAgIHN0cmVhbS5waXBlKGd1bnppcClcbiAgICAgICAgICAgICAgLm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgY291bnQgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoKGNvdW50IC8gbWV0YWRhdGEuVmlydHVhbFNpemUgKiAxMDApLnRvRml4ZWQoMikgKyAnJSAgICBcXHInKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nKCdTRVJWRVI6IEVuZCBvZiBzdHJlYW0uIERhdGEgcmVjZWl2ZWQ6ICcgKyBoZWxwZXJzLmh1bWFuRmlsZVNpemUoY291bnQpKTtcbiAgICAgICAgICAgICAgICBjaGlsZF9wcm9jZXNzLnNwYXduKCdkb2NrZXInLCBbJ3RhZycsIG1ldGFkYXRhLklkLCBuYW1lXSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXRhZGF0YS5JZCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5waXBlKGNtZC5zdGRpbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxvZygnRG9ja2VyLXRyYW5zZmVyIHNlcnZlciBkaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nvbm5lY3Rpb24nKTtcbiAgICAgICAgc2VydmVyLmNsb3NlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VydmVyLmxpc3Rlbihwb3J0LCBob3N0LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCwgaG9zdCwgY2FsbGJhY2soKSk7XG4gICAgICB9XG5cbiAgICAgIC8vICAgc2VydmVyLm9uKCdjb25uZWN0aW9uJywgZnVuY3Rpb24oY29ubikge1xuICAgICAgLy8gICAgIHZhciBjb25uSXAgPSBjb25uLnJlbW90ZUFkZHJlc3M7XG4gICAgICAvLyAgICAgdmFyIGNvbm5Qb3J0ID0gY29ubi5yZW1vdGVQb3J0O1xuXG4gICAgICAvLyAgICAgY29ubi5vbignY2xvc2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKFwiXFxuXCIgKyBjb25uSXArJzonK2Nvbm5Qb3J0LCAnZGlzY29ubmVjdGVkLicpO1xuICAgICAgLy8gICAgIH0pO1xuXG4gICAgICAvLyAgICAgY29ubi5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIC8vICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKCdEYXRhIHJlY2VpdmVkOiAnXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICsgaGVscGVycy5odW1hbkZpbGVTaXplKGNvbm4uYnl0ZXNSZWFkKVxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICAgICAgICAgICAgICAgIFxcclwiKTtcbiAgICAgIC8vICAgICB9KTtcblxuICAgICAgLy8gICAgIGNvbm4ub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gICAgICAgY29uc29sZS5sb2coXCJcXG5cIiArIGNvbm5JcCsnOicrY29ublBvcnQsICdlbmRlZC4nKTtcbiAgICAgIC8vICAgICAgIHJlc29sdmUobmFtZSk7XG4gICAgICAvLyAgICAgfSk7XG5cbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhuYW1lKTtcbiAgICAgIC8vICAgICAvLyBsZXQgY21kID0gY2hpbGRfcHJvY2Vzcy5zcGF3bignZG9ja2VyJywgWydpbXBvcnQnLCAnLScsIG5hbWVdKTtcbiAgICAgIC8vICAgICAvLyBjb25uLnBpcGUoZ3VuemlwKS5waXBlKGNtZC5zdGRpbik7XG4gICAgICAvLyAgIH0pO1xuICAgICAgc2VydmVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHJ1bihoYXNoLCBwb3J0KSB7XG4gICAgbGV0IHBvcnRzID0gW3BvcnQsICc6JywgODBdLmpvaW4oJycpO1xuICAgIC8vIGRvY2tlciBydW4gLWQgLXAgJEVYVEVSTkFMX1BPUlQ6JElOVEVSTkFMX1BPUlQgJElNQUdFX0hBU0hcbiAgICBjaGlsZF9wcm9jZXNzLnNwYXduKCdkb2NrZXInLCBbJ3J1bicsICctZCcsICctcCcsIHBvcnRzLCBtZXRhZGF0YS5JZF0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsb2coc3RyKSB7XG4gICAgY29uc29sZS5sb2coaGVscGVycy50aW1lc3RhbXAoKSwgc3RyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cztcblxuIl19