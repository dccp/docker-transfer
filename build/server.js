"use strict";

var server = require("http").createServer(),
    io = require("socket.io")(server),
    ss = require("socket.io-stream"),
    fs = require("fs"),
    zlib = require("zlib"),
    helpers = require("./helpers.js"),
    child_process = require("child_process"),
    buffer = require("buffer"),
    gunzip = zlib.createGunzip();

var open = undefined;

var exports = {
  receive: function receive(name, port) {
    var host = "0.0.0.0";

    return new Promise(function (resolve, reject) {
      var callback = function callback() {
        log("SERVER: listening at " + host + ":" + port);
        io.sockets.on("connection", function (socket) {
          log("SERVER: received connection");
          ss(socket).on("docker", function (metadata, stream) {
            var count = 0;
            var cmd = child_process.spawn("docker", ["load"]);
            stream.pipe(gunzip).on("data", function (data) {
              count += data.length;
              process.stdout.write(Math.min(count / metadata.VirtualSize * 100, 100).toFixed(2) + "%    \r");
            }).on("end", function () {
              log("SERVER: End of stream. Data received: " + helpers.humanFileSize(count));
              child_process.spawn("docker", ["tag", metadata.Id, name]);
              resolve(metadata.Id);
            }).pipe(cmd.stdin);
          });
          socket.on("disconnect", function () {
            server.close();
            open = false;
            log("Docker-transfer server disconnected");
          });
        });
      };

      if (open) {
        socket.removeAllListeners("connection");
        server.close(function () {
          return server.listen(port, host, callback);
        });
      } else {
        open = true;
        server.listen(port, host, callback);
      }
      server.on("error", function (err) {
        return reject(err);
      });
    });
  },
  run: function run(hash, externalPort) {
    var internalPort = 80;
    // docker run -d -p $EXTERNAL_PORT:$INTERNAL_PORT $IMAGE_HASH
    return child_process.exec("docker", ["run", "-d", "-p", "" + externalPort + ":" + internalPort, hash]).toString();
  }
};

function log(str) {
  console.log(helpers.timestamp(), str);
}

module.exports = exports;
//# sourceMappingURL=data:application/json;base64,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QU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7U0FBQSxDQUFDLENBQUM7T0FDekQsTUFBTTtBQUNMLFlBQUksR0FBRyxJQUFJLENBQUM7QUFDWixjQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7T0FDckM7QUFDRCxZQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFBLEdBQUc7ZUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDO09BQUEsQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztHQUNKO0FBQ0QsS0FBRyxFQUFBLGFBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtBQUN0QixRQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7O0FBRXRCLFdBQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksT0FBSyxZQUFZLFNBQUksWUFBWSxFQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDOUc7Q0FDRixDQUFDOztBQUVGLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUNkLFNBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3pDOztpQkFFYyxPQUFPIiwiZmlsZSI6InNyYy9zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2VydmVyID0gcmVxdWlyZSgnaHR0cCcpLmNyZWF0ZVNlcnZlcigpLFxuICAgIGlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoc2VydmVyKSxcbiAgICBzcyA9IHJlcXVpcmUoJ3NvY2tldC5pby1zdHJlYW0nKSxcbiAgICBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgemxpYiA9IHJlcXVpcmUoJ3psaWInKSxcbiAgICBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmpzJyksXG4gICAgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKSxcbiAgICBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKSxcbiAgICBndW56aXAgPSB6bGliLmNyZWF0ZUd1bnppcCgpO1xuXG5sZXQgb3BlbjtcblxubGV0IGV4cG9ydHMgPSB7XG4gIHJlY2VpdmUobmFtZSwgcG9ydCkge1xuICAgIGxldCBob3N0ID0gJzAuMC4wLjAnO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2coYFNFUlZFUjogbGlzdGVuaW5nIGF0ICR7aG9zdH06JHtwb3J0fWApO1xuICAgICAgICBpby5zb2NrZXRzLm9uKCdjb25uZWN0aW9uJywgc29ja2V0ID0+IHtcbiAgICAgICAgICBsb2coJ1NFUlZFUjogcmVjZWl2ZWQgY29ubmVjdGlvbicpO1xuICAgICAgICAgIHNzKHNvY2tldCkub24oJ2RvY2tlcicsIChtZXRhZGF0YSwgc3RyZWFtKSA9PiB7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgbGV0IGNtZCA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24oJ2RvY2tlcicsIFsnbG9hZCddKTtcbiAgICAgICAgICAgIHN0cmVhbS5waXBlKGd1bnppcClcbiAgICAgICAgICAgICAgLm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgY291bnQgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoTWF0aC5taW4oY291bnQgLyBtZXRhZGF0YS5WaXJ0dWFsU2l6ZSAqIDEwMCwgMTAwKS50b0ZpeGVkKDIpICsgJyUgICAgXFxyJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZygnU0VSVkVSOiBFbmQgb2Ygc3RyZWFtLiBEYXRhIHJlY2VpdmVkOiAnICsgaGVscGVycy5odW1hbkZpbGVTaXplKGNvdW50KSk7XG4gICAgICAgICAgICAgICAgY2hpbGRfcHJvY2Vzcy5zcGF3bignZG9ja2VyJywgWyd0YWcnLCBtZXRhZGF0YS5JZCwgbmFtZV0pO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWV0YWRhdGEuSWQpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAucGlwZShjbWQuc3RkaW4pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNvY2tldC5vbignZGlzY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICAgIHNlcnZlci5jbG9zZSgpO1xuICAgICAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgbG9nKCdEb2NrZXItdHJhbnNmZXIgc2VydmVyIGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygnY29ubmVjdGlvbicpO1xuICAgICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4gc2VydmVyLmxpc3Rlbihwb3J0LCBob3N0LCBjYWxsYmFjaykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCwgaG9zdCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgc2VydmVyLm9uKCdlcnJvcicsIGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH0sXG4gIHJ1bihoYXNoLCBleHRlcm5hbFBvcnQpIHtcbiAgICBsZXQgaW50ZXJuYWxQb3J0ID0gODA7XG4gICAgLy8gZG9ja2VyIHJ1biAtZCAtcCAkRVhURVJOQUxfUE9SVDokSU5URVJOQUxfUE9SVCAkSU1BR0VfSEFTSFxuICAgIHJldHVybiBjaGlsZF9wcm9jZXNzLmV4ZWMoJ2RvY2tlcicsIFsncnVuJywgJy1kJywgJy1wJywgYCR7ZXh0ZXJuYWxQb3J0fToke2ludGVybmFsUG9ydH1gLCBoYXNoXSkudG9TdHJpbmcoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbG9nKHN0cikge1xuICAgIGNvbnNvbGUubG9nKGhlbHBlcnMudGltZXN0YW1wKCksIHN0cik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHM7XG5cbiJdfQ==