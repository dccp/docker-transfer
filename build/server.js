"use strict";

var server = require("http").createServer(),
    io = require("socket.io")(server),
    ss = require("socket.io-stream"),
    fs = require("fs"),
    zlib = require("zlib"),
    helpers = require("./helpers.js"),
    child_process = require("child_process"),
    buffer = require("buffer"),
    gunzip = zlib.createGunzip();

var open = undefined;

var exports = {
  receive: function receive(name, port) {
    var host = "0.0.0.0";

    return new Promise(function (resolve, reject) {
      var callback = function callback() {
        log("SERVER: listening at " + host + ":" + port);
        io.sockets.on("connection", function (socket) {
          log("SERVER: received connection");
          ss(socket).on("docker", function (metadata, stream) {
            var count = 0;
            var cmd = child_process.spawn("docker", ["load"]);
            stream.pipe(gunzip).on("data", function (data) {
              count += data.length;
              process.stdout.write(Math.min(count / metadata.VirtualSize * 100, 100).toFixed(2) + "%    \r");
            }).on("end", function () {
              log("SERVER: End of stream. Data received: " + helpers.humanFileSize(count));
              child_process.spawn("docker", ["tag", metadata.Id, name]);
              resolve(metadata.Id);
            }).pipe(cmd.stdin);
          });
          socket.on("disconnect", function () {
            server.close();
            open = false;
            log("Docker-transfer server disconnected");
          });
        });
      };

      if (open) {
        socket.removeAllListeners("connection");
        server.close(function () {
          return server.listen(port, host, callback);
        });
      } else {
        open = true;
        server.listen(port, host, callback);
      }
      server.on("error", function (err) {
        return reject(err);
      });
    });
  },
  run: function run(hash, externalPort) {
    var internalPort = 80;
    // docker run -d -p $EXTERNAL_PORT:$INTERNAL_PORT $IMAGE_HASH
    child_process.spawn("docker", ["run", "-d", "-p", "" + externalPort + ":" + internalPort, hash]);
  }
};

function log(str) {
  console.log(helpers.timestamp(), str);
}

module.exports = exports;
//# sourceMappingURL=data:application/json;base64,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QU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7U0FBQSxDQUFDLENBQUM7T0FDekQsTUFBTTtBQUNMLFlBQUksR0FBRyxJQUFJLENBQUM7QUFDWixjQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7T0FDckM7QUFDRCxZQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFBLEdBQUc7ZUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDO09BQUEsQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztHQUNKO0FBQ0QsS0FBRyxFQUFBLGFBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtBQUN0QixRQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7O0FBRXRCLGlCQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxPQUFLLFlBQVksU0FBSSxZQUFZLEVBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztHQUM3RjtDQUNGLENBQUM7O0FBRUYsU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQ2QsU0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDekM7O2lCQUVjLE9BQU8iLCJmaWxlIjoic3JjL3NlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzZXJ2ZXIgPSByZXF1aXJlKCdodHRwJykuY3JlYXRlU2VydmVyKCksXG4gICAgaW8gPSByZXF1aXJlKCdzb2NrZXQuaW8nKShzZXJ2ZXIpLFxuICAgIHNzID0gcmVxdWlyZSgnc29ja2V0LmlvLXN0cmVhbScpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICB6bGliID0gcmVxdWlyZSgnemxpYicpLFxuICAgIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuanMnKSxcbiAgICBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLFxuICAgIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLFxuICAgIGd1bnppcCA9IHpsaWIuY3JlYXRlR3VuemlwKCk7XG5cbmxldCBvcGVuO1xuXG5sZXQgZXhwb3J0cyA9IHtcbiAgcmVjZWl2ZShuYW1lLCBwb3J0KSB7XG4gICAgbGV0IGhvc3QgPSAnMC4wLjAuMCc7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvZyhgU0VSVkVSOiBsaXN0ZW5pbmcgYXQgJHtob3N0fToke3BvcnR9YCk7XG4gICAgICAgIGlvLnNvY2tldHMub24oJ2Nvbm5lY3Rpb24nLCBzb2NrZXQgPT4ge1xuICAgICAgICAgIGxvZygnU0VSVkVSOiByZWNlaXZlZCBjb25uZWN0aW9uJyk7XG4gICAgICAgICAgc3Moc29ja2V0KS5vbignZG9ja2VyJywgKG1ldGFkYXRhLCBzdHJlYW0pID0+IHtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgICBsZXQgY21kID0gY2hpbGRfcHJvY2Vzcy5zcGF3bignZG9ja2VyJywgWydsb2FkJ10pO1xuICAgICAgICAgICAgc3RyZWFtLnBpcGUoZ3VuemlwKVxuICAgICAgICAgICAgICAub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShNYXRoLm1pbihjb3VudCAvIG1ldGFkYXRhLlZpcnR1YWxTaXplICogMTAwLCAxMDApLnRvRml4ZWQoMikgKyAnJSAgICBcXHInKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nKCdTRVJWRVI6IEVuZCBvZiBzdHJlYW0uIERhdGEgcmVjZWl2ZWQ6ICcgKyBoZWxwZXJzLmh1bWFuRmlsZVNpemUoY291bnQpKTtcbiAgICAgICAgICAgICAgICBjaGlsZF9wcm9jZXNzLnNwYXduKCdkb2NrZXInLCBbJ3RhZycsIG1ldGFkYXRhLklkLCBuYW1lXSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXRhZGF0YS5JZCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5waXBlKGNtZC5zdGRpbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgc2VydmVyLmNsb3NlKCk7XG4gICAgICAgICAgICBvcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBsb2coJ0RvY2tlci10cmFuc2ZlciBzZXJ2ZXIgZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjb25uZWN0aW9uJyk7XG4gICAgICAgIHNlcnZlci5jbG9zZSgoKSA9PiBzZXJ2ZXIubGlzdGVuKHBvcnQsIGhvc3QsIGNhbGxiYWNrKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuID0gdHJ1ZTtcbiAgICAgICAgc2VydmVyLmxpc3Rlbihwb3J0LCBob3N0LCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBzZXJ2ZXIub24oJ2Vycm9yJywgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfSxcbiAgcnVuKGhhc2gsIGV4dGVybmFsUG9ydCkge1xuICAgIGxldCBpbnRlcm5hbFBvcnQgPSA4MDtcbiAgICAvLyBkb2NrZXIgcnVuIC1kIC1wICRFWFRFUk5BTF9QT1JUOiRJTlRFUk5BTF9QT1JUICRJTUFHRV9IQVNIXG4gICAgY2hpbGRfcHJvY2Vzcy5zcGF3bignZG9ja2VyJywgWydydW4nLCAnLWQnLCAnLXAnLCBgJHtleHRlcm5hbFBvcnR9OiR7aW50ZXJuYWxQb3J0fWAsIGhhc2hdKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbG9nKHN0cikge1xuICAgIGNvbnNvbGUubG9nKGhlbHBlcnMudGltZXN0YW1wKCksIHN0cik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHM7XG5cbiJdfQ==